using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BraveNewWorld
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int dogPositionX;
            int dogPositionY;
            int dogDirectionX = 0;
            int dogDirectionY = 1;
            int collectMoney = 0;
            int allMoney = 0;
            bool isHungry = true;

            Console.CursorVisible = false;

            char[,] map = ReadMap(out map, out dogPositionX, out dogPositionY, ref allMoney);

            DrawMap(map);

            while (isHungry)
            {
                if (Console.KeyAvailable)
                {
                    ConsoleKeyInfo key = Console.ReadKey(true);
                    ChangeDirection(key, ref dogDirectionX, ref dogDirectionY);
                }

                if (map[dogPositionX + dogDirectionX, dogPositionY + dogDirectionY] != '#')
                {
                    CollectMoney(map, dogPositionX, dogPositionY, ref collectMoney);
                    Move(map, '@', ref dogPositionX, ref dogPositionY, dogDirectionX, dogDirectionY);
                }

                Console.SetCursorPosition(0, 21);
                
                if (allMoney == collectMoney) 
                {
                    isHungry = false;
                    Console.WriteLine("Все деньги съедены!!!!");
                }

                System.Threading.Thread.Sleep(200);
            }
        }

        static void ChangeDirection(ConsoleKeyInfo key, ref int dogDirectionX, ref int dogDirectionY)
        {
            switch (key.Key)
            {
                case ConsoleKey.UpArrow:
                    dogDirectionX = -1;
                    dogDirectionY = 0;
                    break;

                case ConsoleKey.DownArrow:
                    dogDirectionX = 1;
                    dogDirectionY = 0;
                    break;

                case ConsoleKey.LeftArrow:
                    dogDirectionX = 0;
                    dogDirectionY = -1;
                    break;

                case ConsoleKey.RightArrow:
                    dogDirectionX = 0;
                    dogDirectionY = 1;
                    break;
            }
        }

        static void CollectMoney(char[,] map, int dogPositionX, int dogPositionY, ref int collectMoney)
        {
            if (map[dogPositionX, dogPositionY] == '$')
            {
                collectMoney++;
                map[dogPositionX, dogPositionY] = ' ';
            }
        }

        static void Move(char[,] map, char symbol, ref int dogPositionX, ref int dogPositionY, int dogDirectionX, int dogDirectionY)
        {
            Console.SetCursorPosition(dogPositionY, dogPositionX);
            Console.Write(map[dogPositionX, dogPositionY]);

            dogPositionX += dogDirectionX;
            dogPositionY += dogDirectionY;

            Console.SetCursorPosition(dogPositionY, dogPositionX);
            Console.Write(symbol);
        }

        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }
                Console.WriteLine();
            }
        }

        static char[,] ReadMap(out char[,] mapName, out int dogPositionX, out int dogPositionY, ref int allMoney)
        {
            char[,] map =
            {
           {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
           {'#','@',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
           {'#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ','#'},
           {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ','#'},
           {'#','#',' ','#','#','#','#','#',' ','#','#','#','#','#','#','#','#','#','#',' ','#'},
           {'#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
           {'#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ','#','#','#'},
           {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
           {'#',' ','#','#','#','#','#','#','#',' ','#','#','#','#','#','#','#','#','#',' ','#'},
           {'#',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
           {'#','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ','#','#'},
           {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
           {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ','#'},
           {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
           {'#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ','#'},
           {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
           {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
            };

            dogPositionX = 0;
            dogPositionY = 0;
            mapName = map;

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i, j] == '@')
                    {
                        dogPositionX = i;
                        dogPositionY = j;
                        map[i, j] = ' ';
                    }

                    if (map[i, j] == ' ')
                    {                        
                        map[i, j] = '$';
                        allMoney++;
                    }
                }
            }

            return map;       
        }
    }
}


